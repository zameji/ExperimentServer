{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Page from '../components/Page';\nimport AddComparison from '../components/AddComparison';\nimport Comparisons from '../components/Comparisons';\nimport LoadFile from '../components/LoadFile';\nimport repackResults from '../components/repack-results';\n\nconst {\n  unpack\n} = require('jcb64');\n\nconst {\n  getInfo\n} = require('@alheimsins/b5-result-text');\n\nconst FileSaver = require('file-saver');\n\nexport default class Compare extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comparisons: [],\n      scores: false,\n      language: 'en',\n      viewLanguage: 'en'\n    };\n    this.addComparison = this.addComparison.bind(this);\n    this.getWidth = this.getWidth.bind(this);\n    this.handleTranslate = this.handleTranslate.bind(this);\n    this.loadComparison = this.loadComparison.bind(this);\n    this.loadResult = this.loadResult.bind(this);\n    this.handleSaveComparison = this.handleSaveComparison.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n  }\n\n  async componentDidMount() {\n    document.addEventListener('DOMContentLoaded', this.getWidth(), false);\n    window.addEventListener('resize', this.getWidth.bind(this));\n  }\n\n  addComparison(e) {\n    e.preventDefault();\n    let id = false;\n    const nameField = document.getElementById('comparisonName');\n    const compressedDataField = document.getElementById('comparisonData');\n\n    if (compressedDataField.value.startsWith('http')) {\n      const url = new URL(compressedDataField.value);\n      const params = new URLSearchParams(url.search.replace('?', ''));\n      id = params.get('id');\n    } else {\n      id = compressedDataField.value;\n    }\n\n    const data = unpack(id);\n    this.updateScores({\n      name: nameField.value,\n      data: data\n    });\n    nameField.value = '';\n    compressedDataField.value = '';\n  }\n\n  updateScores(data) {\n    const comparisons = this.state.comparisons;\n    comparisons.push(data);\n    const language = this.state.viewLanguage;\n    const scores = repackResults(comparisons, language);\n    this.setState({\n      comparisons: comparisons,\n      scores: scores\n    });\n  }\n\n  loadResult(e) {\n    e.preventDefault();\n    const reader = new window.FileReader();\n    const files = e.target.files;\n    const fileField = e.target;\n    const nameField = document.getElementById('comparisonName');\n\n    reader.onload = () => {\n      const text = reader.result;\n      const data = JSON.parse(text);\n      this.updateScores({\n        name: nameField.value,\n        data: data\n      });\n      nameField.value = '';\n      fileField.value = '';\n    };\n\n    if (files.length === 1) {\n      reader.readAsText(files[0]);\n    }\n  }\n\n  handleSaveComparison(e) {\n    e.preventDefault();\n    const comparisons = this.state.comparisons;\n    const file = new window.File([_JSON$stringify(comparisons, null, 2)], 'b5-comparison.json', {\n      type: 'text/json;charset=utf-8'\n    });\n    FileSaver.saveAs(file);\n  }\n\n  loadComparison(e) {\n    e.preventDefault();\n    const reader = new window.FileReader();\n    const files = e.target.files;\n\n    reader.onload = () => {\n      const text = reader.result;\n      const json = JSON.parse(text);\n      const language = this.state.viewLanguage;\n      const scores = repackResults(json, language);\n      this.setState({\n        comparisons: json,\n        scores: scores\n      });\n    };\n\n    if (files.length === 1) {\n      reader.readAsText(files[0]);\n    }\n  }\n\n  handleTranslate(e) {\n    e.preventDefault();\n    const language = e.target.dataset.language;\n    const comparisons = this.state.comparisons;\n    const scores = repackResults(comparisons, language);\n    this.setState({\n      scores: scores,\n      viewLanguage: language\n    });\n  }\n\n  getWidth() {\n    const width = document.documentElement.clientWidth * 0.9;\n    this.setState({\n      chartWidth: width >= 500 ? width : 500\n    });\n  }\n\n  render() {\n    return __jsx(Page, null, __jsx(\"h1\", {\n      className: \"jsx-2393900586\" + \" \" + 'no-print'\n    }, \"Big five comparison\"), getInfo().languages.map((lang, index) => __jsx(\"button\", {\n      \"data-language\": lang,\n      onClick: this.handleTranslate,\n      key: index,\n      className: \"jsx-2393900586\" + \" \" + ((lang === this.state.viewLanguage ? 'isActive no-print' : 'no-print') || \"\")\n    }, lang)), __jsx(AddComparison, {\n      addComparison: this.addComparison\n    }), __jsx(LoadFile, {\n      handler: this.loadResult,\n      buttonTitle: \"Load result\"\n    }), this.state.scores ? __jsx(Comparisons, {\n      data: this.state.scores,\n      chartWidth: this.state.chartWidth\n    }) : null, this.state.comparisons.length > 0 ? __jsx(\"button\", {\n      onClick: this.handleSaveComparison,\n      className: \"jsx-2393900586\"\n    }, \"Save comparison\") : null, this.state.comparisons.length === 0 ? __jsx(LoadFile, {\n      handler: this.loadComparison,\n      buttonTitle: \"Load comparison\"\n    }) : null, __jsx(_JSXStyle, {\n      id: \"2393900586\"\n    }, [\"button.jsx-2393900586{background-color:white;border-radius:2px;color:black;padding:15px 32px;text-align:center;-webkit-text-decoration:none;text-decoration:none;display:inline-block;font-size:16px;width:200px;margin:10px;cursor:pointer;}\", \"button.jsx-2393900586:focus{outline:0;}\", \"button.jsx-2393900586:active{outline:0;}\", \".isActive.jsx-2393900586{background:yellow;}\", \"@media print{.no-print.jsx-2393900586,.no-print.jsx-2393900586 *.jsx-2393900586{display:none !important;}}\"]));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}
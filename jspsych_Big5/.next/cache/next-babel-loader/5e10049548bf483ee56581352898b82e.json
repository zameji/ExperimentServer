{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport Page from '../components/Page';\nimport Resume from '../components/Resume';\nimport AddResults from '../components/AddResults';\nimport LoadFile from '../components/LoadFile';\n\nconst {\n  unpack\n} = require('jcb64');\n\nconst calculateScore = require('@alheimsins/bigfive-calculate-score');\n\nconst getResult = require('@alheimsins/b5-result-text');\n\nconst {\n  getInfo\n} = require('@alheimsins/b5-result-text');\n\nconst FileSaver = require('file-saver');\n\nexport default class Result extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      b64: false,\n      scores: false,\n      resume: false,\n      results: false,\n      language: 'en',\n      viewLanguage: 'en',\n      chartWidth: 600\n    };\n    this.addResults = this.addResults.bind(this);\n    this.getWidth = this.getWidth.bind(this);\n    this.loadResults = this.loadResults.bind(this);\n    this.handleSaveResults = this.handleSaveResults.bind(this);\n    this.handleTranslateResume = this.handleTranslateResume.bind(this);\n  }\n\n  async componentDidMount() {\n    const params = new URLSearchParams(window.location.search.replace('?', ''));\n    const queryId = params.get('id');\n\n    if (queryId) {\n      const b64 = queryId;\n      const results = unpack(b64);\n      const scores = calculateScore({\n        answers: results.answers\n      });\n      const info = getInfo();\n      let language = this.state.language;\n\n      if (info.languages.includes(results.language)) {\n        language = results.language;\n      }\n\n      const resume = getResult({\n        scores: scores,\n        lang: language\n      });\n      this.setState({\n        b64: b64,\n        scores: scores,\n        resume: resume,\n        language: results.language,\n        viewLanguage: language,\n        results: results\n      });\n    }\n\n    document.addEventListener('DOMContentLoaded', this.getWidth(), false);\n    window.addEventListener('resize', this.getWidth.bind(this));\n  }\n\n  getWidth() {\n    const width = document.documentElement.clientWidth * 0.9;\n    this.setState({\n      chartWidth: width >= 500 ? width : 500\n    });\n  }\n\n  addResults(e) {\n    e.preventDefault();\n    let b64 = false;\n    const compressedDataField = document.getElementById('resultData');\n\n    if (compressedDataField.value.startsWith('http')) {\n      const url = new URL(compressedDataField.value);\n      const params = new URLSearchParams(url.search.replace('?', ''));\n      b64 = params.get('id');\n    } else {\n      b64 = compressedDataField.value;\n    }\n\n    const results = unpack(b64);\n    const scores = calculateScore({\n      answers: results.answers\n    });\n    const info = getInfo();\n    let language = this.state.language;\n\n    if (info.languages.includes(results.language)) {\n      language = results.language;\n    }\n\n    const resume = getResult({\n      scores: scores,\n      lang: language\n    });\n    this.setState({\n      b64: b64,\n      scores: scores,\n      resume: resume,\n      language: results.language,\n      viewLanguage: language,\n      results: results\n    });\n    compressedDataField.value = '';\n  }\n\n  loadResults(e) {\n    e.preventDefault();\n    const reader = new window.FileReader();\n    const files = e.target.files;\n\n    reader.onload = () => {\n      const text = reader.result;\n      const results = JSON.parse(text);\n      const scores = calculateScore({\n        answers: results.answers\n      });\n      const info = getInfo();\n      let language = this.state.language;\n\n      if (info.languages.includes(results.language)) {\n        language = results.language;\n      }\n\n      const resume = getResult({\n        scores: scores,\n        lang: language\n      });\n      this.setState({\n        scores: scores,\n        resume: resume,\n        language: results.language,\n        viewLanguage: language,\n        results: results\n      });\n    };\n\n    if (files.length === 1) {\n      reader.readAsText(files[0]);\n    }\n  }\n\n  handleSaveResults(e) {\n    e.preventDefault();\n    const results = this.state.results;\n    const file = new window.File([_JSON$stringify(results, null, 2)], 'b5-results.json', {\n      type: 'text/json;charset=utf-8'\n    });\n    FileSaver.saveAs(file);\n  }\n\n  handleTranslateResume(e) {\n    e.preventDefault();\n    const language = e.target.dataset.language;\n    const scores = this.state.scores;\n    const resume = getResult({\n      scores: scores,\n      lang: language\n    });\n    this.setState({\n      resume: resume,\n      viewLanguage: language\n    });\n  }\n\n  render() {\n    return __jsx(Page, null, __jsx(\"h1\", {\n      className: \"jsx-3414253364\"\n    }, \"Big Five Result\"), getInfo().languages.map((lang, index) => __jsx(\"button\", {\n      \"data-language\": lang,\n      onClick: this.handleTranslateResume,\n      key: index,\n      className: \"jsx-3414253364\" + \" \" + ((lang === this.state.viewLanguage ? 'isActive' : '') || \"\")\n    }, lang)), this.state.resume === false ? __jsx(AddResults, {\n      addResults: this.addResults\n    }) : null, this.state.resume === false ? __jsx(LoadFile, {\n      handler: this.loadResults,\n      buttonTitle: \"Upload\"\n    }) : null, this.state.resume !== false ? __jsx(Resume, {\n      data: this.state.resume,\n      width: this.state.chartWidth\n    }) : null, this.state.resume !== false ? __jsx(\"button\", {\n      onClick: this.handleSaveResults,\n      className: \"jsx-3414253364\"\n    }, \"Save results\") : null, __jsx(_JSXStyle, {\n      id: \"3414253364\"\n    }, [\"h2.jsx-3414253364{color:red;font-size:48px;text-align:center;}\", \"a.jsx-3414253364,a.jsx-3414253364:visited{color:white;}\", \"button.jsx-3414253364{background-color:white;border-radius:2px;color:black;padding:15px 32px;text-align:center;-webkit-text-decoration:none;text-decoration:none;display:inline-block;font-size:16px;width:200px;margin:10px;cursor:pointer;}\", \"button.jsx-3414253364:focus{outline:0;}\", \"button.jsx-3414253364:active{outline:0;}\", \".isActive.jsx-3414253364{background:yellow;}\"]));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}